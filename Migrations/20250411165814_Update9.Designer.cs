// <auto-generated />
using System;
using FinTracer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinTracer.Migrations
{
    [DbContext(typeof(FinTraceContext))]
    [Migration("20250411165814_Update9")]
    partial class Update9
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("FinTracer.Models.ComparisonModel", b =>
                {
                    b.Property<Guid>("ComparisonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .HasColumnType("TEXT");

                    b.Property<string>("CacheRmse")
                        .HasColumnType("TEXT");

                    b.Property<string>("CachedResult")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenerateBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mad")
                        .HasColumnType("TEXT");

                    b.Property<string>("Period")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ComparisonId");

                    b.ToTable("Comparisons");
                });

            modelBuilder.Entity("FinTracer.Models.FileTransfer", b =>
                {
                    b.Property<Guid>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastCopied")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogMessages")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledToCopy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SourceCreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceFile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceMd5")
                        .HasColumnType("TEXT");

                    b.Property<long>("SourceSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TargetCreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetFile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetMd5")
                        .HasColumnType("TEXT");

                    b.Property<long>("TargetSize")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransferId");

                    b.ToTable("Filetransfers");
                });

            modelBuilder.Entity("FinTracer.Models.Timeline", b =>
                {
                    b.Property<Guid>("TimeLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChartType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tooltip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("XAxis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("YAxis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TimeLineId");

                    b.ToTable("Timelines");
                });
#pragma warning restore 612, 618
        }
    }
}
