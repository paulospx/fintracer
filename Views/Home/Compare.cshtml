@{
    ViewData["Title"] = "Fin Tracer - Compare Files";
}

<div class="text-center">
    <h1>Compare</h1>
    <p>Compares curves of 2 Super Set excel files.</p>

</div>

<div class="row mb-3">
    <div class="col-md-4">
        <label for="periodSelect" class="form-label">Select Period</label>
        <select id="periodSelect" class="form-select" onchange="showComparison();calculateSummary();">
            <option value="" disabled selected>Loading periods...</option>
        </select>
    </div>
    <div class="col-md-4">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="up">
            <label class="form-check-label" for="up">Up</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="down">
            <label class="form-check-label" for="down">Down</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="cra">
            <label class="form-check-label" for="cra">CRA</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="delta-ladders">
            <label class="form-check-label" for="delta-ladders">Delta Ladders</label>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="lip">
            <label class="form-check-label" for="lip">LIP</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="aegon">
            <label class="form-check-label" for="aegon">Aegon</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="asr">
            <label class="form-check-label" for="asr">ASR</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="flattener">
            <label class="form-check-label" for="flattener">Flattener</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="steepener">
            <label class="form-check-label" for="steepener">Steepener</label>
        </div>
    </div>
</div>


<!-- Charts-->
<div class="row">
    <div class="col-sm-12">
        <h2>Overview</h2>
        <div id="container1"></div>
    </div>
</div>

<div id="comp">
</div>

<script>
    Highcharts.setOptions({
        colors: ['#4ACB82', '#8EE6EF', '#FF40EA', '#7872C0', '#E92531', '#FFB900', '#969696', '#FF409B'], // a.s.r. Palette
    });

    function generateSummaryChart(data) {
            const series = [{
                name: 'Up',
                id: 'up',
                marker: {
                    symbol: 'circle'
                }
            },
            {
                name: 'Down',
                id: 'down',
                marker: {
                    symbol: 'triangle'
                }
            },
            {
                name: 'Aegon',
                id: 'aegon',
                marker: {
                    symbol: 'circle'
                }
            },
            {
                name: 'ASR',
                id: 'asr',
                marker: {
                    symbol: 'triangle'
                }
            },
            {
                name: 'Other',
                id: 'other',
                marker: {
                    symbol: 'square'
                }
            }];

            series.forEach(function(s){
                var catdata = [];
                data.forEach(function(d) {
                    
                    if (s.id==d.category) {
                        catdata.push([d.maturity,d.delta]);
                    }
                });
                s.data = catdata;
            });

            Highcharts.chart('container1', {
            chart: {
                type: 'scatter',
                zooming: {
                    type: 'xy'
                }
            },
            title: {
                text: 'Overview of Differences by Curve Category'
            },
            subtitle: {
                text: 'Source file Here'
            },
            xAxis: {
                title: {
                    text: 'Maturities'
                },
                labels: {
                    format: '{value}Y'
                },
                startOnTick: true,
                endOnTick: true,
                showLastLabel: true
            },
            yAxis: {
                title: {
                    text: 'Values'
                },
                labels: {
                    format: '{value}'
                }
            },
            legend: {
                enabled: true
            },
            plotOptions: {
                scatter: {
                    marker: {
                        radius: 2.5,
                        symbol: 'circle',
                        states: {
                            hover: {
                                enabled: true,
                                lineColor: 'rgb(100,100,100)'
                            }
                        }
                    },
                    states: {
                        hover: {
                            marker: {
                                enabled: false
                            }
                        }
                    },
                    jitter: {
                        x: 0.005
                    }
                }
            },
            tooltip: {
                pointFormat: 'Difference: {point.x} <br /> Maturity: {point.y} Y'
            },
            series
        });

    }

    function createChart(id, title, data) {
        Highcharts.chart(id, {
            title: {
                text: title,
                align: 'left'
            },

            subtitle: {
                text: 'By a.s.r. ARM Team.',
                align: 'left'
            },

            yAxis: {
                title: {
                    text: 'Value'
                }
            },

            xAxis: {
                accessibility: {
                    rangeDescription: 'Maturities'
                },
                categories: []
            },

            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle'
            },

            plotOptions: {
                series: {
                    label: {
                        connectorAllowed: false
                    },
                    pointStart: 0
                }
            },

            series: data,

            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        legend: {
                            layout: 'horizontal',
                            align: 'center',
                            verticalAlign: 'bottom'
                        }
                    }
                }]
            }
        });
    }

    function getCategory(curveName) {
        curveName = curveName.toLowerCase();
        var category = "other";
        if (curveName.includes("up")) {
            category = "up";
        } else if (curveName.includes("down")) {
            category = "down";
        } else if (curveName.includes("cra")) {
            category = "cra";
        } else if (curveName.includes("aegon")) {
            category = "aegon";
        } else if (curveName.includes("asr")) {
            category = "asr";
        } 
        return category;
    }



    
    function calculateSummary() {
        var period = $("#periodSelect").val();
        $.get("/Compare/Summary", {period:period, text:getCheckedValuesCSV()},function(result) {
                var summary = [];
            result.forEach(function(s){
                var deltas = JSON.parse(s.delta);
                for(m = 0; m < deltas.length; m++) {
                    summary.push({maturity:m+1,delta:deltas[m],sum:s.deltaSum,period:s.period,title:s.title, category:getCategory(s.title)});
                }
            });
            generateSummaryChart(summary);
            //console.log(summary);
        });
    }

    function createChartDivs(total) {
        var html = "";
        for (i=1; i<=total; i=i+1) {
            html += `<div class="row">
        <div class="col-sm-6">
            <h2></h2>
            <div id="comparison${i}"></div>
        </div>
        <div class="col-sm-6">
            <h2></h2>
             <div id="comparison.delta${i}"></div>
        </div>
    </div>`;
        }
        $("#comp").html(html);
    }

    function chartTitle(title) {
        if (title.length > 20) {
            return title.substr(0,20) + "..." ;
        }
        return title;
    }

    function getCheckedCheckboxes() {
        const checkedValues = [];
        $('.form-check-input:checked').each(function () {
            checkedValues.push($(this).attr('id'));
        });
        return checkedValues;
    }


    function showComparison() {
        var period = $("#periodSelect").val();

        $.get("/Compare/Categories", {period:period, text:getCheckedValuesCSV()},function(result) {
            createChartDivs(result.length);
            var i = 1;
            result.forEach(function(comparison){
                var series = [
                    { name : chartTitle(comparison.title), data : JSON.parse(comparison.sourceCurve)},
                    { name : chartTitle(comparison.title), data : JSON.parse(comparison.targetCurve)}
                ];

                createChart(`comparison${i}`,"Curves " + comparison.title, series);

                var deltaSeries = [
                        { name : chartTitle(comparison.title), data : JSON.parse(comparison.delta)}
                ]

                createChart(`comparison.delta${i}`,"Delta " + comparison.title, deltaSeries);
                i=i+1;
            });
        });
        }


    $(document).ready(function () {
        $.get("/Compare/Periods", function (data) {
            const periodSelect = $("#periodSelect");
            periodSelect.empty(); // Clear existing options

            // Populate the select box with periods
            if (data && data.length > 0) {
                periodSelect.append('<option value="" disabled selected>Select a period</option>');
                data.forEach(period => {
                    periodSelect.append(`<option value="${period}">${period}</option>`);
                });
            } else {
                periodSelect.append('<option value="" disabled>No periods available</option>');
            }
        }).fail(function () {
            // Handle errors
            const periodSelect = $("#periodSelect");
            periodSelect.empty();
            periodSelect.append('<option value="" disabled>Error loading periods</option>');
        });


    });
</script>