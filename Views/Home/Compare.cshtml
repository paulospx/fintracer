@{
    ViewData["Title"] = "Fin Tracer - Compare Files";
}

<div class="text-center">
    <h1>Compare</h1>
    <p>Compares curves of 2 Super Set excel files.</p>

</div>

<!--
<div class="row" id="filter">
    <div class="col-md-3">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">Filter Options</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <input type="text" class="form-control" placeholder="Search curves...">
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="up">
                    <label class="form-check-label" for="up">Up</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="down">
                    <label class="form-check-label" for="down">Down</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="cra">
                    <label class="form-check-label" for="cra">CRA</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="delta-ladders">
                    <label class="form-check-label" for="delta-ladders">Delta Ladders</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="lip">
                    <label class="form-check-label" for="lip">LIP</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="aegon">
                    <label class="form-check-label" for="aegon">Aegon</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="asr">
                    <label class="form-check-label" for="asr">ASR</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="flattener">
                    <label class="form-check-label" for="flattener">Flattener</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="steepener">
                    <label class="form-check-label" for="steepener">Steepener</label>
                </div>
                <div class="mt-3">
                    <button class="btn btn-primary w-100" onclick="filterCurveTypes()">Apply Filters</button>
                    <button class="btn btn-secondary w-100 mt-2" onclick="clearCurveTypes()">Clear All</button>
                </div>
            </div>
        </div>
    </div>
</div>
-->

<!-- Charts-->
<div class="row">
    <div class="col-sm-6">
        <h2>Container 1</h2>
        <div id="container1"></div>
    </div>
    <div class="col-sm-6">
        <h2>Container 2</h2>
        <div id="container2"></div>
    </div>
</div>
<div id="comp">
</div>

<script>
    Highcharts.setOptions({
        colors: ['#4ACB82', '#8EE6EF', '#FF40EA', '#7872C0', '#E92531', '#FFB900', '#969696', '#FF409B'], // a.s.r. Palette
    });

    const series = [{
        name: 'Athletics',
        id: 'athletics',
        marker: {
            symbol: 'circle'
        }
    },
    {
        name: 'Triathlon',
        id: 'triathlon',
        marker: {
            symbol: 'triangle'
        }
    },
    {
        name: 'Volleyball',
        id: 'volleyball',
        marker: {
            symbol: 'square'
        }
    }];


async function getData() {
    const response = await fetch(
        '/data/olympic2012.json'
    );
    return response.json();
}

getData().then(data => {
    const getData = sportName => {
        const temp = [];
        data.forEach(elm => {
            if (elm.sport === sportName && elm.weight > 0 && elm.height > 0) {
                temp.push([elm.height, elm.weight]);
            }
        });
        return temp;
    };
    series.forEach(s => {
        s.data = getData(s.id);
    });


    Highcharts.chart('container1', {
        chart: {
            type: 'scatter',
            zooming: {
                type: 'xy'
            }
        },
        title: {
            text: 'Olympics athletes by height and weight'
        },
        subtitle: {
            text: 'Source file Here'
        },
        xAxis: {
            title: {
                text: 'Height'
            },
            labels: {
                format: '{value} m'
            },
            startOnTick: true,
            endOnTick: true,
            showLastLabel: true
        },
        yAxis: {
            title: {
                text: 'Weight'
            },
            labels: {
                format: '{value} kg'
            }
        },
        legend: {
            enabled: true
        },
        plotOptions: {
            scatter: {
                marker: {
                    radius: 2.5,
                    symbol: 'circle',
                    states: {
                        hover: {
                            enabled: true,
                            lineColor: 'rgb(100,100,100)'
                        }
                    }
                },
                states: {
                    hover: {
                        marker: {
                            enabled: false
                        }
                    }
                },
                jitter: {
                    x: 0.005
                }
            }
        },
        tooltip: {
            pointFormat: 'Height: {point.x} m <br /> Weight: {point.y} kg'
        },
        series
    });

    Highcharts.chart('container2', {
        chart: {
            type: 'scatter',
            zooming: {
                type: 'xy'
            }
        },
        title: {
            text: 'Olympics athletes by height and weight'
        },
        subtitle: {
            text: 'Source file Here'
        },
        xAxis: {
            title: {
                text: 'Height'
            },
            labels: {
                format: '{value} m'
            },
            startOnTick: true,
            endOnTick: true,
            showLastLabel: true
        },
        yAxis: {
            title: {
                text: 'Weight'
            },
            labels: {
                format: '{value} kg'
            }
        },
        legend: {
            enabled: true
        },
        plotOptions: {
            scatter: {
                marker: {
                    radius: 2.5,
                    symbol: 'circle',
                    states: {
                        hover: {
                            enabled: true,
                            lineColor: 'rgb(100,100,100)'
                        }
                    }
                },
                states: {
                    hover: {
                        marker: {
                            enabled: false
                        }
                    }
                },
                jitter: {
                    x: 0.005
                }
            }
        },
        tooltip: {
            pointFormat: 'Height: {point.x} m <br /> Weight: {point.y} kg'
        },
        series
    });
});

    function createChart(id, title, data) {
        Highcharts.chart(id, {
            title: {
                text: title,
                align: 'left'
            },

            subtitle: {
                text: 'By a.s.r. ARM Team.',
                align: 'left'
            },

            yAxis: {
                title: {
                    text: 'Value'
                }
            },

            xAxis: {
                accessibility: {
                    rangeDescription: 'Maturities'
                },
                categories: []
            },

            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle'
            },

            plotOptions: {
                series: {
                    label: {
                        connectorAllowed: false
                    },
                    pointStart: 0
                }
            },

            series: data,

            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        legend: {
                            layout: 'horizontal',
                            align: 'center',
                            verticalAlign: 'bottom'
                        }
                    }
                }]
            }
        });
    }

    function createChartDivs(total) {
        var html = "";
        for (i=1; i<=total; i=i+1) {
            html += `<div class="row">
        <div class="col-sm-6">
            <h2></h2>
            <div id="comparison${i}"></div>
        </div>
        <div class="col-sm-6">
            <h2></h2>
             <div id="comparison.delta${i}"></div>
        </div>
    </div>`;
        }
        $("#comp").html(html);
    }

    function chartTitle(title) {
        if (title.length > 20) {
            return title.substr(0,20) + "..." ;
        }
        return title;
    }

    function toCSVLine(strings) {
        return strings
            .map(str => {
                if (str.includes('"') || str.includes(',')) {
                    return `"${str.replace(/"/g, '""')}"`;
                }
                return str;
            })
            .join(',');
    }

    function getCheckedValues() {
        const checkedValues = [];
        $('.form-check-input:checked').each(function () {
            checkedValues.push($(this).attr('id'));
        });
        return checkedValues;
    }

    function filterCurveTypes() {
        var categories = getCheckedValues();
        alert("TODO "+ toCSVLine(categories));
        $("#filter").hide();
    }

    function clearCurveTypes(){
        alert("TODO");
    }




    $(document).ready(function () {
        $.get("/Compare/List?period=2025M03",function(result) {
            createChartDivs(result.length);
            var i = 1;
            result.forEach(function(comparison){
                var series = [
                    { name : chartTitle(comparison.title), data : JSON.parse(comparison.sourceCurve)},
                    { name : chartTitle(comparison.title), data : JSON.parse(comparison.targetCurve)}
                ];

                createChart(`comparison${i}`,"Curves " + comparison.title, series);

                var deltaSeries = [
                        { name : chartTitle(comparison.title), data : JSON.parse(comparison.delta)}
                ]

                createChart(`comparison.delta${i}`,"Delta " + comparison.title, deltaSeries);

                i=i+1;
            });
        });
    });
</script>